#!/bin/bash
set -eu

rundir=@openvpnrundir@
rm -f "$rundir"/notify_socket
mkfifo -m666 "$rundir"/notify_socket
# requires cap chown
#chgrp openvpn "$rundir"/notify_socket

# The tunnel needs to be in the default ns first so openvpn can tap into it
if ip -4 -netns @vpnnetns@ addr flush dev @openvpniface@ 2>/dev/null; then
  echo "<3>control: WARNING: @openvpniface@ was still in namespace @vpnnetns@"
  ip -4 -netns @vpnnetns@ link set dev @openvpniface@ down
  sudo "$HOOKDIR"/move_to_default_ns.sh @vpnnetns@ @openvpniface@
fi

if ! ip link show dev @openvpniface@; then
  echo "<3>control: FATAL: @openvpniface@ not found"
  exit 3
fi

trap 'echo "<3>control: sigterm"' TERM
# TODO
(
# needs pgroup to be killed?
trap 'echo "<5>subcontrol: openvpn sigterm"' TERM
# is reset in subshell!
ret=0
openvpn --config vpnns.conf --suppress-timestamps --writepid "$rundir"/openvpn-vpnns.pid || ret=$?
# need to remove so systemd does not reed pids fom another instance
rm -f "$rundir"/openvpn-control.pid

# kill notify_socket write if exists
trap 'true' TERM
kill -TERM 0

exit "$ret"
) &
pid=$!

( echo x > "$rundir"/notify_socket ) &
ret=0
wait $! || ret=$?

if [ "$ret" -ne 0 ]; then
  # was signaled
  echo "<3>control: openvpn startup failed"
  ret=10
  wait "$pid" || ret=$?
  exit "$ret"
else
  echo "$pid" > "$rundir"/openvpn-control.pid
  echo "<5>control: openvpn startup succeeded"
fi
